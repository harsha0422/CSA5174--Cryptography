#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define MAX 100
char matrix[5][5];
void removeDuplicates(char *key) {
    int length = strlen(key);
    int index = 0;
    for (int i = 0; i < length; i++) {
        key[i] = toupper(key[i]);
        if (key[i] == 'J') {
            key[i] = 'I';  
        }
        int j;
        for (j = 0; j < i; j++) {
            if (key[i] == key[j]) {
                break;
            }
        }
        if (j == i) {
            key[index++] = key[i];
        }
    }
    key[index] = '\0';  
}
void fillMatrix(char *key) {
    int k = 0;
    int used[26] = {0}; 
    for (int i = 0; key[i] != '\0'; i++) {
        if (!used[key[i] - 'A']) {
            matrix[k / 5][k % 5] = key[i];
            used[key[i] - 'A'] = 1;
            k++;
        }
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch != 'J' && !used[ch - 'A']) {
            matrix[k / 5][k % 5] = ch;
            k++;
        }
    }
}
void findPosition(char ch, int *row, int *col) {
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void formatText(char *text, char *formattedText) {
    int length = strlen(text);
    int index = 0;

    for (int i = 0; i < length; i++) {
        if (isalpha(text[i])) {
            formattedText[index++] = toupper(text[i]);
        }
    }
    if (index % 2 != 0) {
        formattedText[index++] = 'X';  
    }
    formattedText[index] = '\0';
}
void encryptText(char *text, char *ciphertext) {
    int length = strlen(text);
    int row1, col1, row2, col2;
    int index = 0;
    for (int i = 0; i < length; i += 2) {
        findPosition(text[i], &row1, &col1);
        findPosition(text[i + 1], &row2, &col2);
        if (row1 == row2) {
            ciphertext[index++] = matrix[row1][(col1 + 1) % 5];
            ciphertext[index++] = matrix[row2][(col2 + 1) % 5];
        }
        else if (col1 == col2) {
            ciphertext[index++] = matrix[(row1 + 1) % 5][col1];
            ciphertext[index++] = matrix[(row2 + 1) % 5][col2];
        }
        else {
            ciphertext[index++] = matrix[row1][col2];
            ciphertext[index++] = matrix[row2][col1];
        }
    }
    ciphertext[index] = '\0';
}
int main() {
    char key[MAX], plaintext[MAX], formattedText[MAX], ciphertext[MAX];
    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    key[strcspn(key, "\n")] = '\0';
    plaintext[strcspn(plaintext, "\n")] = '\0';
    removeDuplicates(key);
    fillMatrix(key);
    formatText(plaintext, formattedText);
    encryptText(formattedText, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
